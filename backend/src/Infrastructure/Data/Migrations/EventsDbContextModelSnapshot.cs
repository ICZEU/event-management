// <auto-generated />
using System;
using EventManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventManagement.Infrastructure.Data.Migrations
{
    [DbContext(typeof(EventsDbContext))]
    partial class EventsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Detail")
                        .HasMaxLength(1000);

                    b.Property<bool>("Succeeded");

                    b.Property<Guid>("TicketId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("AuditEventLog");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.DemoEmailRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid>("MailSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("MailSettingsId");

                    b.ToTable("DemoEmailRecipients");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime?>("EntranceTime");

                    b.Property<string>("HomepageUrl")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid?>("MailSettingsId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("MailSettingsId")
                        .IsUnique()
                        .HasFilter("[MailSettingsId] IS NOT NULL");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.MailSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<bool>("EnableDemoMode");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("SmtpHost")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("SmtpPassword")
                        .HasMaxLength(300);

                    b.Property<int>("SmtpPort");

                    b.Property<string>("SmtpUsername")
                        .HasMaxLength(300);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("UseStartTls");

                    b.HasKey("Id");

                    b.ToTable("MailSettings");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.MasterQrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("EventId");

                    b.Property<Guid>("OwnerId");

                    b.Property<DateTime?>("RevokedAt");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("OwnerId");

                    b.ToTable("MasterQrCodes");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(1000);

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<DateTime?>("BookingDate");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatorId");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<string>("DeliveryType")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditedAt");

                    b.Property<Guid?>("EditorId");

                    b.Property<Guid>("EventId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(300);

                    b.Property<string>("Gender")
                        .HasColumnType("nchar(1)");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDelivered");

                    b.Property<string>("LastName")
                        .HasMaxLength(300);

                    b.Property<string>("Mail")
                        .HasMaxLength(254);

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(100);

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(300);

                    b.Property<bool?>("TermsAccepted");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TicketSecret")
                        .IsRequired();

                    b.Property<Guid>("TicketTypeId");

                    b.Property<bool>("Validated");

                    b.HasKey("Id");

                    b.HasAlternateKey("TicketNumber");

                    b.HasAlternateKey("TicketSecret");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EventId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("Quota");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.AuditEvent", b =>
                {
                    b.HasOne("EventManagement.ApplicationCore.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.DemoEmailRecipient", b =>
                {
                    b.HasOne("EventManagement.ApplicationCore.Models.MailSettings")
                        .WithMany("DemoEmailRecipients")
                        .HasForeignKey("MailSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.Event", b =>
                {
                    b.HasOne("EventManagement.ApplicationCore.Models.MailSettings", "MailSettings")
                        .WithOne("Event")
                        .HasForeignKey("EventManagement.ApplicationCore.Models.Event", "MailSettingsId");
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.MasterQrCode", b =>
                {
                    b.HasOne("EventManagement.ApplicationCore.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventManagement.ApplicationCore.Models.User", "Owner")
                        .WithMany("MasterQrCodes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.Ticket", b =>
                {
                    b.HasOne("EventManagement.ApplicationCore.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("EventManagement.ApplicationCore.Models.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("EventManagement.ApplicationCore.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventManagement.ApplicationCore.Models.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EventManagement.ApplicationCore.Models.TicketType", b =>
                {
                    b.HasOne("EventManagement.ApplicationCore.Models.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
