/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { AuthService } from './auth.service';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export class ServiceBase {
    
    constructor(private authService: AuthService) {}

    protected transformOptions(options: any) {
        return this.authService.getAuthorizationHeaderValue().then(headerValue => {
            options.headers = {
                'Content-Type':  'application/json',
                'Authorization': headerValue
            };
            return options;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class EventManagementApiClient extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * List audit event log entries for a specific ticket.
     * @param ticketId Id of the ticket.
     * @return List of audit events. Recent entries at first.
     */
    auditEvents_List(ticketId: string): Observable<AuditEvent[]> {
        let url_ = this.baseUrl + "/api/tickets/{ticketId}/auditevents";
        if (ticketId === undefined || ticketId === null)
            throw new Error("The parameter 'ticketId' must be defined.");
        url_ = url_.replace("{ticketId}", encodeURIComponent("" + ticketId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAuditEvents_List(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuditEvents_List(<any>response_);
                } catch (e) {
                    return <Observable<AuditEvent[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuditEvent[]>><any>_observableThrow(response_);
        }));
    }

    protected processAuditEvents_List(response: HttpResponseBase): Observable<AuditEvent[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AuditEvent.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuditEvent[]>(<any>null);
    }

    /**
     * Lists all api clients.
     */
    clients_GetClientsOfEvent(): Observable<Client[]> {
        let url_ = this.baseUrl + "/api/clients";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processClients_GetClientsOfEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClients_GetClientsOfEvent(<any>response_);
                } catch (e) {
                    return <Observable<Client[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Client[]>><any>_observableThrow(response_);
        }));
    }

    protected processClients_GetClientsOfEvent(response: HttpResponseBase): Observable<Client[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Client.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Client[]>(<any>null);
    }

    /**
     * Add a new api client.
     */
    clients_CreateClient(model: Client): Observable<Client> {
        let url_ = this.baseUrl + "/api/clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processClients_CreateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClients_CreateClient(<any>response_);
                } catch (e) {
                    return <Observable<Client>><any>_observableThrow(e);
                }
            } else
                return <Observable<Client>><any>_observableThrow(response_);
        }));
    }

    protected processClients_CreateClient(response: HttpResponseBase): Observable<Client> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Client.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Get a single client by its id.
     * @param id Client ID
     * @return client details
     */
    clients_GetClientById(id: string): Observable<Client> {
        let url_ = this.baseUrl + "/api/clients/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processClients_GetClientById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClients_GetClientById(<any>response_);
                } catch (e) {
                    return <Observable<Client>><any>_observableThrow(e);
                }
            } else
                return <Observable<Client>><any>_observableThrow(response_);
        }));
    }

    protected processClients_GetClientById(response: HttpResponseBase): Observable<Client> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Client.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Client>(<any>null);
    }

    /**
     * Update a certain api client.
     * @param id Client ID
     * @param model properties to update
     */
    clients_UpdateClient(id: string, model: Client): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processClients_UpdateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClients_UpdateClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processClients_UpdateClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * List events.
     * @param location (optional) Filter the events by their location (must contain string).
     * @param future (optional) Return only events in the future.
     */
    events_List(location?: string | null | undefined, future?: boolean | undefined): Observable<Event[]> {
        let url_ = this.baseUrl + "/api/events?";
        if (location !== undefined && location !== null)
            url_ += "Location=" + encodeURIComponent("" + location) + "&";
        if (future === null)
            throw new Error("The parameter 'future' cannot be null.");
        else if (future !== undefined)
            url_ += "Future=" + encodeURIComponent("" + future) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEvents_List(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEvents_List(<any>response_);
                } catch (e) {
                    return <Observable<Event[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Event[]>><any>_observableThrow(response_);
        }));
    }

    protected processEvents_List(response: HttpResponseBase): Observable<Event[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Event.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Event[]>(<any>null);
    }

    /**
     * Create a new event.
     */
    events_CreateEvent(model: Event): Observable<Event> {
        let url_ = this.baseUrl + "/api/events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEvents_CreateEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEvents_CreateEvent(<any>response_);
                } catch (e) {
                    return <Observable<Event>><any>_observableThrow(e);
                }
            } else
                return <Observable<Event>><any>_observableThrow(response_);
        }));
    }

    protected processEvents_CreateEvent(response: HttpResponseBase): Observable<Event> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Event.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Get an event by its id.
     * @param id Id of the event.
     * @return the event.
     */
    events_GetEvent(id: string): Observable<Event> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEvents_GetEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEvents_GetEvent(<any>response_);
                } catch (e) {
                    return <Observable<Event>><any>_observableThrow(e);
                }
            } else
                return <Observable<Event>><any>_observableThrow(response_);
        }));
    }

    protected processEvents_GetEvent(response: HttpResponseBase): Observable<Event> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Event.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Event>(<any>null);
    }

    /**
     * Update an event.
     * @param id Id of the event.
     */
    events_UpdateEvent(id: string, model: Event): Observable<void> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEvents_UpdateEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEvents_UpdateEvent(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processEvents_UpdateEvent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Delete an event.
     * @param id Id of the event.
     */
    events_DeleteEvent(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEvents_DeleteEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEvents_DeleteEvent(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processEvents_DeleteEvent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Report the status of the event (sent tickets, checked-in tickets).
     * @param eventId Id of the event.
     */
    eventStatus_GetStatus(eventId: string): Observable<EventStatus> {
        let url_ = this.baseUrl + "/api/eventstatus/events/{eventId}/status";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEventStatus_GetStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEventStatus_GetStatus(<any>response_);
                } catch (e) {
                    return <Observable<EventStatus>><any>_observableThrow(e);
                }
            } else
                return <Observable<EventStatus>><any>_observableThrow(response_);
        }));
    }

    protected processEventStatus_GetStatus(response: HttpResponseBase): Observable<EventStatus> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventStatus.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventStatus>(<any>null);
    }

    /**
     * Get mail settings for an event.
     * @param eventId Id of the event.
     * @return Mail settings
     */
    mailSettings_GetMailSettings(eventId: string): Observable<MailSettings> {
        let url_ = this.baseUrl + "/api/events/{eventId}/mailsettings";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processMailSettings_GetMailSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMailSettings_GetMailSettings(<any>response_);
                } catch (e) {
                    return <Observable<MailSettings>><any>_observableThrow(e);
                }
            } else
                return <Observable<MailSettings>><any>_observableThrow(response_);
        }));
    }

    protected processMailSettings_GetMailSettings(response: HttpResponseBase): Observable<MailSettings> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MailSettings.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MailSettings>(<any>null);
    }

    /**
     * Update mail settings for an event.
     * @param eventId Id of the event.
     * @param values mail settings
     */
    mailSettings_UpdateMailSettings(eventId: string, values: MailSettings): Observable<void> {
        let url_ = this.baseUrl + "/api/events/{eventId}/mailsettings";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(values);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processMailSettings_UpdateMailSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMailSettings_UpdateMailSettings(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processMailSettings_UpdateMailSettings(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Lists all support tickets for a given event.
     * @param eventId Id of the event.
     * @param status (optional) Filter the support tickets by status (new, inprogress, closed).
     */
    supportTickets_List(eventId: string, status?: SupportTicketStatus | null | undefined): Observable<SupportTicket[]> {
        let url_ = this.baseUrl + "/api/events/{eventId}/supporttickets?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        if (status !== undefined && status !== null)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSupportTickets_List(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSupportTickets_List(<any>response_);
                } catch (e) {
                    return <Observable<SupportTicket[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SupportTicket[]>><any>_observableThrow(response_);
        }));
    }

    protected processSupportTickets_List(response: HttpResponseBase): Observable<SupportTicket[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SupportTicket.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SupportTicket[]>(<any>null);
    }

    /**
     * Update the status of a support ticket.
     * @param id Id of the ticket.
     * @param args new status of the ticket.
     */
    supportTickets_SetStatus(id: string, args: SetStatusCommandArgs): Observable<FileResponse> {
        let url_ = this.baseUrl + "/supporttickets/{id}/status";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(args);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSupportTickets_SetStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSupportTickets_SetStatus(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSupportTickets_SetStatus(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Send a ticket via e-mail.
     * @param ticketId Id of the ticket.
     */
    ticketDelivery_SendMail(ticketId: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/tickets/{ticketId}/sendmail";
        if (ticketId === undefined || ticketId === null)
            throw new Error("The parameter 'ticketId' must be defined.");
        url_ = url_.replace("{ticketId}", encodeURIComponent("" + ticketId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTicketDelivery_SendMail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicketDelivery_SendMail(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processTicketDelivery_SendMail(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Send multiple tickets via e-mail at once.
     * @param eventId Id of the event.
     * @param sendAll (optional) Allows sending e-mails twice (even if the ticket has been sent before).
     * @param ticketTypes (optional) Ticket types to filter by.
     * @param paymentStatus (optional) Payment status to filter by.
     * @param dryRun (optional) Try the method without sending e-mails.
     * @return result of the batch send.
     */
    ticketDelivery_SendBatchMails(eventId: string, sendAll?: boolean | undefined, ticketTypes?: string[] | null | undefined, paymentStatus?: PaymentStatus[] | null | undefined, dryRun?: boolean | undefined): Observable<BatchSendResult> {
        let url_ = this.baseUrl + "/api/events/{eventId}/tickets/sendmails?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        if (sendAll === null)
            throw new Error("The parameter 'sendAll' cannot be null.");
        else if (sendAll !== undefined)
            url_ += "SendAll=" + encodeURIComponent("" + sendAll) + "&";
        if (ticketTypes !== undefined && ticketTypes !== null)
            ticketTypes && ticketTypes.forEach(item => { url_ += "TicketTypes=" + encodeURIComponent("" + item) + "&"; });
        if (paymentStatus !== undefined && paymentStatus !== null)
            paymentStatus && paymentStatus.forEach(item => { url_ += "PaymentStatus=" + encodeURIComponent("" + item) + "&"; });
        if (dryRun === null)
            throw new Error("The parameter 'dryRun' cannot be null.");
        else if (dryRun !== undefined)
            url_ += "DryRun=" + encodeURIComponent("" + dryRun) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTicketDelivery_SendBatchMails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicketDelivery_SendBatchMails(<any>response_);
                } catch (e) {
                    return <Observable<BatchSendResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<BatchSendResult>><any>_observableThrow(response_);
        }));
    }

    protected processTicketDelivery_SendBatchMails(response: HttpResponseBase): Observable<BatchSendResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BatchSendResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BatchSendResult>(<any>null);
    }

    /**
     * Download a ticket as pdf.
     * @param id Id of the ticket.
     * @return pdf file
     */
    ticketDownload_DownloadAsPdf(id: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/tickets/{id}/pdf";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTicketDownload_DownloadAsPdf(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicketDownload_DownloadAsPdf(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processTicketDownload_DownloadAsPdf(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Report the sold tickets and quotas for each ticket type.
     * @param eventId Id of the event.
     */
    ticketQuotaReport_GetReport(eventId: string): Observable<TicketQuotaReportRow[]> {
        let url_ = this.baseUrl + "/api/events/{eventId}/reports/quotas";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTicketQuotaReport_GetReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicketQuotaReport_GetReport(<any>response_);
                } catch (e) {
                    return <Observable<TicketQuotaReportRow[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TicketQuotaReportRow[]>><any>_observableThrow(response_);
        }));
    }

    protected processTicketQuotaReport_GetReport(response: HttpResponseBase): Observable<TicketQuotaReportRow[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TicketQuotaReportRow.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TicketQuotaReportRow[]>(<any>null);
    }

    /**
     * Lists all tickets for a given event.
     * @param eventId Id of the event.
     * @param filter (optional) 
     * @param order (optional) 
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @param isDelivered (optional) if true, only delivered tickets are listed.
     * @param validated (optional) if true, which have gone through entrance control successfully will be listed.
     * @param ticketTypeId (optional) Filter the list by a specific ticket type.
     * @param paymentStatus (optional) List all tickets with a specific payment status.
     */
    tickets_GetTickets(eventId: string, filter?: string | null | undefined, order?: string | null | undefined, pageNumber?: number | undefined, pageSize?: number | undefined, isDelivered?: boolean | null | undefined, validated?: boolean | null | undefined, ticketTypeId?: string | null | undefined, paymentStatus?: PaymentStatus | null | undefined): Observable<PaginationResultOfTicket> {
        let url_ = this.baseUrl + "/api/events/{eventId}/tickets?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (order !== undefined && order !== null)
            url_ += "Order=" + encodeURIComponent("" + order) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (isDelivered !== undefined && isDelivered !== null)
            url_ += "isDelivered=" + encodeURIComponent("" + isDelivered) + "&";
        if (validated !== undefined && validated !== null)
            url_ += "validated=" + encodeURIComponent("" + validated) + "&";
        if (ticketTypeId !== undefined && ticketTypeId !== null)
            url_ += "ticketTypeId=" + encodeURIComponent("" + ticketTypeId) + "&";
        if (paymentStatus !== undefined && paymentStatus !== null)
            url_ += "paymentStatus=" + encodeURIComponent("" + paymentStatus) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTickets_GetTickets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_GetTickets(<any>response_);
                } catch (e) {
                    return <Observable<PaginationResultOfTicket>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaginationResultOfTicket>><any>_observableThrow(response_);
        }));
    }

    protected processTickets_GetTickets(response: HttpResponseBase): Observable<PaginationResultOfTicket> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfTicket.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginationResultOfTicket>(<any>null);
    }

    /**
     * Get a single ticket by its id.
     * @param id Id of the ticket.
     * @return ticket details
     */
    tickets_GetById(id: string): Observable<Ticket> {
        let url_ = this.baseUrl + "/api/tickets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTickets_GetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_GetById(<any>response_);
                } catch (e) {
                    return <Observable<Ticket>><any>_observableThrow(e);
                }
            } else
                return <Observable<Ticket>><any>_observableThrow(response_);
        }));
    }

    protected processTickets_GetById(response: HttpResponseBase): Observable<Ticket> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Ticket.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Ticket>(<any>null);
    }

    /**
     * Update all details of an existing ticket (replace all fields).
     * @param id Id of the ticket.
     * @param model Ticket details.
     * @return updated ticket.
     */
    tickets_UpdateTicket(id: string, model: Ticket): Observable<void> {
        let url_ = this.baseUrl + "/api/tickets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTickets_UpdateTicket(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_UpdateTicket(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTickets_UpdateTicket(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Apply some changes to an existing ticket.
     * @param id Id of the ticket.
     * @param patchDoc JSON Patch Document which describes the changes.
                See http://jsonpatch.com
     */
    tickets_UpdateTicketPatch(id: string, patchDoc: Operation[]): Observable<void> {
        let url_ = this.baseUrl + "/api/tickets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patchDoc);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTickets_UpdateTicketPatch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_UpdateTicketPatch(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTickets_UpdateTicketPatch(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Delete a specific ticket.
     * @param id Id of the ticket.
     */
    tickets_DeleteTicket(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/tickets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTickets_DeleteTicket(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_DeleteTicket(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTickets_DeleteTicket(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Create a new ticket.
     * @param model ticket details
     * @return details of created ticket.
     */
    tickets_CreateTicket(model: Ticket): Observable<Ticket> {
        let url_ = this.baseUrl + "/api/tickets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTickets_CreateTicket(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_CreateTicket(<any>response_);
                } catch (e) {
                    return <Observable<Ticket>><any>_observableThrow(e);
                }
            } else
                return <Observable<Ticket>><any>_observableThrow(response_);
        }));
    }

    protected processTickets_CreateTicket(response: HttpResponseBase): Observable<Ticket> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Ticket.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * List all available ticket types for an event.
     * @param eventId Id of the event.
     * @return List of ticket types.
     */
    ticketTypes_GetTicketTypes(eventId: string): Observable<TicketType[]> {
        let url_ = this.baseUrl + "/api/events/{eventId}/tickettypes";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTicketTypes_GetTicketTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicketTypes_GetTicketTypes(<any>response_);
                } catch (e) {
                    return <Observable<TicketType[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TicketType[]>><any>_observableThrow(response_);
        }));
    }

    protected processTicketTypes_GetTicketTypes(response: HttpResponseBase): Observable<TicketType[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TicketType.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TicketType[]>(<any>null);
    }

    /**
     * Set all available ticket types for an event.
     * @param eventId Id of the event.
     * @param items Ticket types to set for the event.
     * @return List of ticket types.
     */
    ticketTypes_AddOrUpdateTicketTypes(eventId: string, items: TicketType[]): Observable<TicketType[]> {
        let url_ = this.baseUrl + "/api/events/{eventId}/tickettypes";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(items);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTicketTypes_AddOrUpdateTicketTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicketTypes_AddOrUpdateTicketTypes(<any>response_);
                } catch (e) {
                    return <Observable<TicketType[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TicketType[]>><any>_observableThrow(response_);
        }));
    }

    protected processTicketTypes_AddOrUpdateTicketTypes(response: HttpResponseBase): Observable<TicketType[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TicketType.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TicketType[]>(<any>null);
    }
}

export class AuditEvent implements IAuditEvent {
    time?: Date;
    action?: string | undefined;
    detail?: string | undefined;
    level?: string | undefined;

    constructor(data?: IAuditEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.time = _data["time"] ? new Date(_data["time"].toString()) : <any>undefined;
            this.action = _data["action"];
            this.detail = _data["detail"];
            this.level = _data["level"];
        }
    }

    static fromJS(data: any): AuditEvent {
        data = typeof data === 'object' ? data : {};
        let result = new AuditEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["action"] = this.action;
        data["detail"] = this.detail;
        data["level"] = this.level;
        return data; 
    }
}

export interface IAuditEvent {
    time?: Date;
    action?: string | undefined;
    detail?: string | undefined;
    level?: string | undefined;
}

export class Client implements IClient {
    id?: string;
    name!: string;
    secret?: string | undefined;
    enabled?: boolean;
    createdAt?: Date;
    editedAt?: Date | undefined;

    constructor(data?: IClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.secret = _data["secret"];
            this.enabled = _data["enabled"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.editedAt = _data["editedAt"] ? new Date(_data["editedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Client {
        data = typeof data === 'object' ? data : {};
        let result = new Client();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["secret"] = this.secret;
        data["enabled"] = this.enabled;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["editedAt"] = this.editedAt ? this.editedAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IClient {
    id?: string;
    name: string;
    secret?: string | undefined;
    enabled?: boolean;
    createdAt?: Date;
    editedAt?: Date | undefined;
}

/** A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807. */
export class ProblemDetails implements IProblemDetails {
    /** A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
dereferenced, it provide human-readable documentation for the problem type
(e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
"about:blank". */
    type?: string | undefined;
    /** A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
of the problem, except for purposes of localization(e.g., using proactive content negotiation;
see[RFC7231], Section 3.4). */
    title?: string | undefined;
    /** The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. */
    status?: number | undefined;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail?: string | undefined;
    /** A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced. */
    instance?: string | undefined;
    /** Gets the IDictionary`2 for extension members.

Problem type definitions MAY extend the problem details object with additional members. Extension members appear in the same namespace as
other members of a problem type. */
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        (<any>this.extensions)![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    (<any>data["extensions"])[key] = this.extensions[key];
            }
        }
        return data; 
    }
}

/** A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807. */
export interface IProblemDetails {
    /** A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
dereferenced, it provide human-readable documentation for the problem type
(e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
"about:blank". */
    type?: string | undefined;
    /** A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
of the problem, except for purposes of localization(e.g., using proactive content negotiation;
see[RFC7231], Section 3.4). */
    title?: string | undefined;
    /** The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. */
    status?: number | undefined;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail?: string | undefined;
    /** A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced. */
    instance?: string | undefined;
    /** Gets the IDictionary`2 for extension members.

Problem type definitions MAY extend the problem details object with additional members. Extension members appear in the same namespace as
other members of a problem type. */
    extensions?: { [key: string]: any; } | undefined;
}

export class Event implements IEvent {
    id?: string;
    name!: string;
    /** If the event is a conference this affects nearly every process.
If it's not a conference (eg: a concert) the personal information doesn't matter. */
    isConference?: boolean;
    startTime!: Date;
    endTime!: Date;
    entranceTime?: Date | undefined;
    ticketSalesStartTime?: Date | undefined;
    location!: string;
    host!: string;
    address!: string;
    zipCode!: string;
    city!: string;
    homepageUrl!: string;
    /** True, if you want to add personal information in form 
of a JSON Web Token (JWT) when redirecting to the homepage. */
    includePersonalInformation?: boolean;

    constructor(data?: IEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isConference = _data["isConference"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.entranceTime = _data["entranceTime"] ? new Date(_data["entranceTime"].toString()) : <any>undefined;
            this.ticketSalesStartTime = _data["ticketSalesStartTime"] ? new Date(_data["ticketSalesStartTime"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.host = _data["host"];
            this.address = _data["address"];
            this.zipCode = _data["zipCode"];
            this.city = _data["city"];
            this.homepageUrl = _data["homepageUrl"];
            this.includePersonalInformation = _data["includePersonalInformation"];
        }
    }

    static fromJS(data: any): Event {
        data = typeof data === 'object' ? data : {};
        let result = new Event();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isConference"] = this.isConference;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["entranceTime"] = this.entranceTime ? this.entranceTime.toISOString() : <any>undefined;
        data["ticketSalesStartTime"] = this.ticketSalesStartTime ? this.ticketSalesStartTime.toISOString() : <any>undefined;
        data["location"] = this.location;
        data["host"] = this.host;
        data["address"] = this.address;
        data["zipCode"] = this.zipCode;
        data["city"] = this.city;
        data["homepageUrl"] = this.homepageUrl;
        data["includePersonalInformation"] = this.includePersonalInformation;
        return data; 
    }
}

export interface IEvent {
    id?: string;
    name: string;
    /** If the event is a conference this affects nearly every process.
If it's not a conference (eg: a concert) the personal information doesn't matter. */
    isConference?: boolean;
    startTime: Date;
    endTime: Date;
    entranceTime?: Date | undefined;
    ticketSalesStartTime?: Date | undefined;
    location: string;
    host: string;
    address: string;
    zipCode: string;
    city: string;
    homepageUrl: string;
    /** True, if you want to add personal information in form 
of a JSON Web Token (JWT) when redirecting to the homepage. */
    includePersonalInformation?: boolean;
}

export class EventStatus implements IEventStatus {
    ticketsTotal?: number;
    ticketsDelivered?: number;
    ticketsCheckedIn?: number;

    constructor(data?: IEventStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketsTotal = _data["ticketsTotal"];
            this.ticketsDelivered = _data["ticketsDelivered"];
            this.ticketsCheckedIn = _data["ticketsCheckedIn"];
        }
    }

    static fromJS(data: any): EventStatus {
        data = typeof data === 'object' ? data : {};
        let result = new EventStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketsTotal"] = this.ticketsTotal;
        data["ticketsDelivered"] = this.ticketsDelivered;
        data["ticketsCheckedIn"] = this.ticketsCheckedIn;
        return data; 
    }
}

export interface IEventStatus {
    ticketsTotal?: number;
    ticketsDelivered?: number;
    ticketsCheckedIn?: number;
}

export class MailSettings implements IMailSettings {
    smtpHost!: string;
    smtpPort?: number;
    smtpUsername?: string | undefined;
    smtpPassword?: string | undefined;
    useStartTls?: boolean;
    senderAddress!: string;
    replyToAddress?: string | undefined;
    subject!: string;
    body!: string;
    enableDemoMode?: boolean;
    demoEmailRecipients?: string[] | undefined;

    constructor(data?: IMailSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.smtpHost = _data["smtpHost"];
            this.smtpPort = _data["smtpPort"];
            this.smtpUsername = _data["smtpUsername"];
            this.smtpPassword = _data["smtpPassword"];
            this.useStartTls = _data["useStartTls"];
            this.senderAddress = _data["senderAddress"];
            this.replyToAddress = _data["replyToAddress"];
            this.subject = _data["subject"];
            this.body = _data["body"];
            this.enableDemoMode = _data["enableDemoMode"];
            if (Array.isArray(_data["demoEmailRecipients"])) {
                this.demoEmailRecipients = [] as any;
                for (let item of _data["demoEmailRecipients"])
                    this.demoEmailRecipients!.push(item);
            }
        }
    }

    static fromJS(data: any): MailSettings {
        data = typeof data === 'object' ? data : {};
        let result = new MailSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUsername"] = this.smtpUsername;
        data["smtpPassword"] = this.smtpPassword;
        data["useStartTls"] = this.useStartTls;
        data["senderAddress"] = this.senderAddress;
        data["replyToAddress"] = this.replyToAddress;
        data["subject"] = this.subject;
        data["body"] = this.body;
        data["enableDemoMode"] = this.enableDemoMode;
        if (Array.isArray(this.demoEmailRecipients)) {
            data["demoEmailRecipients"] = [];
            for (let item of this.demoEmailRecipients)
                data["demoEmailRecipients"].push(item);
        }
        return data; 
    }
}

export interface IMailSettings {
    smtpHost: string;
    smtpPort?: number;
    smtpUsername?: string | undefined;
    smtpPassword?: string | undefined;
    useStartTls?: boolean;
    senderAddress: string;
    replyToAddress?: string | undefined;
    subject: string;
    body: string;
    enableDemoMode?: boolean;
    demoEmailRecipients?: string[] | undefined;
}

export class SupportTicket implements ISupportTicket {
    id?: string;
    ticketId?: string;
    ticketNumber?: string | undefined;
    supportNumber?: number;
    description?: string | undefined;
    status?: SupportTicketStatus;
    createdAt?: Date;
    closedAt?: Date | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;

    constructor(data?: ISupportTicket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.ticketId = _data["ticketId"];
            this.ticketNumber = _data["ticketNumber"];
            this.supportNumber = _data["supportNumber"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.closedAt = _data["closedAt"] ? new Date(_data["closedAt"].toString()) : <any>undefined;
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
        }
    }

    static fromJS(data: any): SupportTicket {
        data = typeof data === 'object' ? data : {};
        let result = new SupportTicket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketId"] = this.ticketId;
        data["ticketNumber"] = this.ticketNumber;
        data["supportNumber"] = this.supportNumber;
        data["description"] = this.description;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["closedAt"] = this.closedAt ? this.closedAt.toISOString() : <any>undefined;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        return data; 
    }
}

export interface ISupportTicket {
    id?: string;
    ticketId?: string;
    ticketNumber?: string | undefined;
    supportNumber?: number;
    description?: string | undefined;
    status?: SupportTicketStatus;
    createdAt?: Date;
    closedAt?: Date | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
}

export enum SupportTicketStatus {
    New = 0,
    InProgress = 1,
    Closed = 2,
}

export class SetStatusCommandArgs implements ISetStatusCommandArgs {
    newStatus!: SupportTicketStatus;

    constructor(data?: ISetStatusCommandArgs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newStatus = _data["newStatus"];
        }
    }

    static fromJS(data: any): SetStatusCommandArgs {
        data = typeof data === 'object' ? data : {};
        let result = new SetStatusCommandArgs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newStatus"] = this.newStatus;
        return data; 
    }
}

export interface ISetStatusCommandArgs {
    newStatus: SupportTicketStatus;
}

export class BatchSendResult implements IBatchSendResult {
    dryRun?: boolean;
    mailsSent?: number;
    ticketsWithoutEmailAddress?: number;

    constructor(data?: IBatchSendResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dryRun = _data["dryRun"];
            this.mailsSent = _data["mailsSent"];
            this.ticketsWithoutEmailAddress = _data["ticketsWithoutEmailAddress"];
        }
    }

    static fromJS(data: any): BatchSendResult {
        data = typeof data === 'object' ? data : {};
        let result = new BatchSendResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dryRun"] = this.dryRun;
        data["mailsSent"] = this.mailsSent;
        data["ticketsWithoutEmailAddress"] = this.ticketsWithoutEmailAddress;
        return data; 
    }
}

export interface IBatchSendResult {
    dryRun?: boolean;
    mailsSent?: number;
    ticketsWithoutEmailAddress?: number;
}

export enum PaymentStatus {
    Open = 0,
    Paid = 1,
    PaidPartial = 2,
}

export class TicketQuotaReportRow implements ITicketQuotaReportRow {
    name?: string | undefined;
    price?: number;
    quota?: number | undefined;
    /** Number of existing tickets of this ticket type. */
    count?: number;

    constructor(data?: ITicketQuotaReportRow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.price = _data["price"];
            this.quota = _data["quota"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): TicketQuotaReportRow {
        data = typeof data === 'object' ? data : {};
        let result = new TicketQuotaReportRow();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["price"] = this.price;
        data["quota"] = this.quota;
        data["count"] = this.count;
        return data; 
    }
}

export interface ITicketQuotaReportRow {
    name?: string | undefined;
    price?: number;
    quota?: number | undefined;
    /** Number of existing tickets of this ticket type. */
    count?: number;
}

export class PaginationResultOfTicket implements IPaginationResultOfTicket {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    data?: Ticket[] | undefined;

    constructor(data?: IPaginationResultOfTicket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Ticket.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginationResultOfTicket {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfTicket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaginationResultOfTicket {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    data?: Ticket[] | undefined;
}

export class Ticket implements ITicket {
    id?: string;
    ticketNumber?: string | undefined;
    eventId?: string;
    ticketTypeId?: string;
    ticketTypeName?: string | undefined;
    validated?: boolean;
    mail?: string | undefined;
    phone?: string | undefined;
    paymentStatus?: PaymentStatus;
    amountPaid?: number | undefined;
    termsAccepted?: boolean;
    lastName?: string | undefined;
    firstName?: string | undefined;
    birthDate?: Date | undefined;
    gender?: string | undefined;
    address?: string | undefined;
    roomNumber?: string | undefined;
    bookingDate?: Date | undefined;
    createdAt?: Date;
    editedAt?: Date | undefined;
    creator?: string | undefined;
    editor?: string | undefined;
    isDelivered?: boolean;
    deliveryDate?: Date | undefined;
    deliveryType?: TicketDeliveryType | undefined;

    constructor(data?: ITicket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.ticketNumber = _data["ticketNumber"];
            this.eventId = _data["eventId"];
            this.ticketTypeId = _data["ticketTypeId"];
            this.ticketTypeName = _data["ticketTypeName"];
            this.validated = _data["validated"];
            this.mail = _data["mail"];
            this.phone = _data["phone"];
            this.paymentStatus = _data["paymentStatus"];
            this.amountPaid = _data["amountPaid"];
            this.termsAccepted = _data["termsAccepted"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.address = _data["address"];
            this.roomNumber = _data["roomNumber"];
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.editedAt = _data["editedAt"] ? new Date(_data["editedAt"].toString()) : <any>undefined;
            this.creator = _data["creator"];
            this.editor = _data["editor"];
            this.isDelivered = _data["isDelivered"];
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>undefined;
            this.deliveryType = _data["deliveryType"];
        }
    }

    static fromJS(data: any): Ticket {
        data = typeof data === 'object' ? data : {};
        let result = new Ticket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketNumber"] = this.ticketNumber;
        data["eventId"] = this.eventId;
        data["ticketTypeId"] = this.ticketTypeId;
        data["ticketTypeName"] = this.ticketTypeName;
        data["validated"] = this.validated;
        data["mail"] = this.mail;
        data["phone"] = this.phone;
        data["paymentStatus"] = this.paymentStatus;
        data["amountPaid"] = this.amountPaid;
        data["termsAccepted"] = this.termsAccepted;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["address"] = this.address;
        data["roomNumber"] = this.roomNumber;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["editedAt"] = this.editedAt ? this.editedAt.toISOString() : <any>undefined;
        data["creator"] = this.creator;
        data["editor"] = this.editor;
        data["isDelivered"] = this.isDelivered;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["deliveryType"] = this.deliveryType;
        return data; 
    }
}

export interface ITicket {
    id?: string;
    ticketNumber?: string | undefined;
    eventId?: string;
    ticketTypeId?: string;
    ticketTypeName?: string | undefined;
    validated?: boolean;
    mail?: string | undefined;
    phone?: string | undefined;
    paymentStatus?: PaymentStatus;
    amountPaid?: number | undefined;
    termsAccepted?: boolean;
    lastName?: string | undefined;
    firstName?: string | undefined;
    birthDate?: Date | undefined;
    gender?: string | undefined;
    address?: string | undefined;
    roomNumber?: string | undefined;
    bookingDate?: Date | undefined;
    createdAt?: Date;
    editedAt?: Date | undefined;
    creator?: string | undefined;
    editor?: string | undefined;
    isDelivered?: boolean;
    deliveryDate?: Date | undefined;
    deliveryType?: TicketDeliveryType | undefined;
}

export enum TicketDeliveryType {
    Email = 0,
    Sms = 1,
    WhatsApp = 2,
    LetterPost = 3,
}

export class OperationBase implements IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;

    constructor(data?: IOperationBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.path = _data["path"];
            this.op = _data["op"];
            this.from = _data["from"];
        }
    }

    static fromJS(data: any): OperationBase {
        data = typeof data === 'object' ? data : {};
        let result = new OperationBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["op"] = this.op;
        data["from"] = this.from;
        return data; 
    }
}

export interface IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;
}

export class Operation extends OperationBase implements IOperation {
    value?: any | undefined;

    constructor(data?: IOperation) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Operation {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

export interface IOperation extends IOperationBase {
    value?: any | undefined;
}

export class TicketType implements ITicketType {
    id?: string;
    name?: string | undefined;
    price?: number;
    quota?: number | undefined;

    constructor(data?: ITicketType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.quota = _data["quota"];
        }
    }

    static fromJS(data: any): TicketType {
        data = typeof data === 'object' ? data : {};
        let result = new TicketType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        data["quota"] = this.quota;
        return data; 
    }
}

export interface ITicketType {
    id?: string;
    name?: string | undefined;
    price?: number;
    quota?: number | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}